Este ejercicio del microservicio me ayudó a entender la ruta directa: un solo servicio con endpoints REST que hacen tanto lectura como escritura, retornando XML con XSLT para visualizar en el navegador. La sensación es de “plug-and-play”: conectas Flask, configuras CORS, haces la consulta SQL con los JOINs necesarios, y listo, el catálogo aparece. No hay que pensar en separar capas ni en eventos, y eso en ambientes chicos o de práctica es cómodo porque el modelo mental es más simple y los cambios se ven rápido.

También me topé con detalles que parecen chicos pero pegan fuerte: si el XSL mete estilos globales, el frontend se puede ver raro; si CORS no está bien configurado, el navegador ni siquiera te deja tocar la API; y si el XML viene mal formado, el parser truena sin piedad. O sea, el “happy path” es corto, pero el “sad path” tiene muchas salidas. Igual, trabajar con Response en XML y una hoja XSL servida por el mismo micro hace que todo se mantenga coherente y fácil de depurar con herramientas del propio navegador (ver el XML crudo, probar endpoints con Postman, etc.).

A nivel base de datos, el patrón es claro: un par de consultas con GROUP_CONCAT para los autores, LEFT JOIN para género y formato, y el CRUD completo de libros. El costo de esta simplicidad es que no hay una línea divisoria entre lecturas y escrituras; en proyectos grandes eso puede complicar escalar, cachés o incluso performance si se dispara todo desde la misma conexión y el mismo proceso. Pero para un servicio único que entrega XML con su XSL y cumple, es más que suficiente. A veces menos capas significa menos puntos de falla.

Al final, lo valioso fue ver el “ciclo completo” sin tanta ceremonia: petición → SQL → XML → XSLT → HTML. Aprendí (otra vez) que la calidad no solo está en la consulta o en el endpoint bonito, sino en el pegamento: CORS bien puesto, manejo de errores decentes, y que el cliente no se rompa por un detalle de estilos. Ya con esto, si en el futuro necesito crecer, sé exactamente dónde duele y por qué tendría sentido migrar a CQRS o a algo más modular.