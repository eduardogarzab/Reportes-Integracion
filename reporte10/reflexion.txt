La práctica con Locust nos permite comprender cómo se comporta un sistema web cuando enfrenta múltiples usuarios concurrentes. Aunque en el desarrollo diario nos enfocamos en que la lógica funcione correctamente, es fácil subestimar cómo la carga real afecta tiempos de respuesta, consumo de recursos y disponibilidad. Este ejercicio nos hace conscientes de la diferencia entre un sistema funcional y un sistema escalable y robusto.

A través de la simulación de tráfico y la recolección de métricas en tiempo real, podemos identificar cuellos de botella, errores de concurrencia y limitaciones de infraestructura que no son evidentes en pruebas unitarias o funcionales. Además, aprender a definir escenarios de prueba realistas y monitorear resultados refuerza la capacidad de anticipar problemas antes de que afecten a usuarios reales, lo cual es crítico en entornos de producción.

Finalmente, usar herramientas como Locust nos enseña la importancia de una cultura de pruebas continuas y de performance testing como parte integral del ciclo de desarrollo. Nos recuerda que un sistema no solo debe cumplir con los requisitos funcionales, sino también soportar la carga esperada sin degradar la experiencia del usuario, fomentando la responsabilidad de diseñar aplicaciones resilientes y escalables.