¿Cloud-Native o Cloud-Enabled? Spotify
En la era que estamos de la computación en la nube, la forma en que se diseñan, desarrollan y despliegan las aplicaciones ha sufrido un cambio muy grande y una transformación radical. Dos enfoques principales que se suelen confundir bastante son el "cloud-enabled" y el "cloud-native". En pocas palabras las aplicaciones habilitadas para la nube (cloud-enabled) son sistemas heredados que han sido adaptados para poderse ejecutar en un entorno de nube, por otro lado, las aplicaciones nativas de la nube (cloud-native) son creadas desde cero para aprovechar al máximo las capacidades de la nube.
Una aplicación cloud-enabled generalmente implica un enfoque que se le conoce como "lift and shift", en este enfoque una aplicación monolítica existente se migrada a una infraestructura de nube con muy pocos cambios en su arquitectura. Si bien esto puede ofrecer algunos beneficios en términos de reducción de costos de infraestructura y escalabilidad, estas aplicaciones no están verdaderamente optimizadas para la elasticidad, resiliencia y agilidad que la nube puede ofrecer ya que desde un inicio no fueron pensadas para la nube.
Por el contrario, una aplicación cloud-native sigue un conjunto de principios que incluyen la arquitectura de microservicios, la contenerización y la automatización de los procesos de desarrollo y despliegue. La Cloud Native Computing Foundation (CNCF) define este enfoque como la construcción y ejecución de aplicaciones escalables en entornos dinámicos y modernos como nubes públicas, privadas e híbridas.
La Arquitectura Cloud-Native de Spotify
Spotify no siempre fue una aplicación nativa de la nube. En sus inicios, operaba desde sus propios centros de datos con una arquitectura que cada vez se volvía más difícil de escalar y mantener. Ellos migraron a Google Cloud Platform (GCP) pero no fue simplemente un "lift and shift" como se le conoce, sino una reestructuración y desarrollo completo de su infraestructura, adoptando desde él diceño los principios cloud-native para poder impulsar su crecimiento y agilidad utilizando todo lo que la nube ofrece y de manera nativa.
Uno de los pilares de la arquitectura de Spotify es la utilización de microservicios. En lugar de hacer una aplicación monolítica, Spotify se compone de muchísimos pequeños servicios que son independientes y donde cada uno de ellos es responsable de una función concreta y específica, por ejemplo, la autenticación de usuarios, la gestión de listas de reproducción o las recomendaciones de música. Esta granularidad permite a los equipos de desarrollo trabajar de forma autónoma, desplegando y escalando sus servicios sin afectar al resto de la aplicación, de igual manera si llegara haber un fallo en un microservicio este no afectaría la aplicación en su totalidad sino se quedaría únicamente afectando a ese servicio.
Para gestionar estos microservicios Spotify utiliza los contenedores con Docker y la gestión o administración con Kubernetes, funciona de la siguiente manera cada uno de los microservicios se empaquetan en un contenedor en donde incluyen todas sus dependencias, garantizando de esta manera la coherencia y funcionamiento correcto en diferentes entornos. Kubernetes se encarga de automatizar el despliegue, el escalado y la gestión de estos contenedores asegurando una alta disponibilidad y la resiliencia de la plataforma. Si un servicio falla, Kubernetes puede reiniciarlo automáticamente, minimizando el tiempo que permanece inactivo.
Conclusión
La transición de Spotify de una infraestructura propia en sus propios centros de datos, a una arquitectura basada en microservicios, contenedores y administración en la nube la posiciona como una aplicación cloud-native. Su enfoque no se limitó a migrar servidores y ya, sino que siguió una nueva filosofía de desarrollo de software en donde se prioriza la agilidad, la escalabilidad y la resiliencia. Al aprovechar al máximo las capacidades de la nube Spotify ha podido innovar a un ritmo rápido, ofrecer una mejor experiencia de usuario y escalar su servicio a nivel global.
Referencias Bibliográficas
•	Cloud Native Computing Foundation. (s.f.). CNCF Cloud Native Definition v1.0. Recuperado de https://github.com/cncf/toc/blob/main/DEFINITION.md
•	Spotify Engineering. (s.f.). Spotify's official technology blog. Recuperado de https://engineering.atspotify.com/
•	Kubernetes. (s.f.). Spotify Case Study. Recuperado de https://kubernetes.io/case-studies/spotify/
•	Google Cloud. (s.f.). Spotify: Putting the band back together with Google Cloud. Recuperado de https://cloud.google.com/customers/spotify
•	BairesDev. (2023, 20 de octubre). How Spotify Engineered a Tech Stack that Streams Music to Millions. BairesDev. Recuperado de https://www.bairesdev.com/blog/spotify-engineering/
•	Cloud Native Computing Foundation. (2019, 27 de junio). Spotify Case Study. Recuperado de https://www.cncf.io/case-studies/spotify/