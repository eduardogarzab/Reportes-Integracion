Este ejercicio de implementar un microservicio con el patrón CQRS y luego conectarlo a un cliente web con HTML, CSS y JavaScript me permitió ver de manera más práctica cómo se puede organizar la arquitectura de un sistema en dos partes: la parte de la lectura (query) y la parte de la escritura (command). Aunque al inicio parecía algo sencillo que simplemente sería duplicar endpoints, la realidad es que este enfoque ayuda a separar responsabilidades y tener más control sobre cómo se leen los datos y cómo se modifican, lo cual en aplicaciones más grandes se vuelve muy importante, y realmente no tan sencillo como lo parece.

Algo que noté también es lo fácil que puede romperse el frontend cuando los estilos no están bien aislados, ya que en este caso al realizar la practica el XSL original estaba inyectaba estilos globales que me cambiaban toda la vista. Y el resolver eso me hizo entender mejor lo importante de encapsular componentes y no depender de que todo se renderice igual en cada navegador. Esto fue un detalle sencillo pero que refleja problemas reales de integración entre capas distintas de un sistema.

Con el tema de CORS también se reflejó un reto típico en aplicaciones: aunque el backend estaba corriendo bien, estaba teniendo problemas ya que el navegador lo bloqueaba porque no reconocía el origen. Esto muestra que muchas veces los errores no vienen del código central sino de configuraciones externas, y hay que aprender a leer los mensajes de error y tener ciertas nociones de que es lo que podría estar fallando.

En conclusión, más que solo practicar consultas y comandos, el ejercicio muestra cómo pequeños detalles de infraestructura, configuración y diseño de interfaces se juntan para que una aplicación funcione. No es solo código, también es poder coordinar las diferentes capas y estructurarlas, algo que pasa bastante en proyectos reales de software y microservicios.
