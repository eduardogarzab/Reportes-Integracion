Trabajar con Swagger en este servicio de autenticación me permitió visualizar rápidamente el flujo completo de login, refresh y revocación de tokens. El esquema de seguridad con bearerAuth hizo evidente la diferencia entre enviar encabezados manualmente versus aprovechar la UI para inyectar el token en cada llamada, lo que agiliza la validación del JWT y reduce errores de tipeo durante las pruebas.

Integrar la documentación con Flasgger también expuso los contratos de entrada y salida frente al equipo. Al describir los esquemas y respuestas, identifiqué campos que no se estaban exponiendo de manera consistente y ajusté la API antes de ir a producción. Además, poder ejecutar cada operación desde /apidocs/ ayudó a detectar casos borde, como mensajes de error cuando el token está revocado en Redis, sin tener que alternar con un cliente externo.

Finalmente, la experiencia refuerza el valor de documentar servicios desde el código fuente. Tener la especificación y los ejemplos generados automáticamente mantiene la documentación sincronizada con la implementación, facilita el on-boarding de otros desarrolladores y abre la puerta a automatizar pruebas contractuales. El esfuerzo inicial en describir cada endpoint se amortiza cuando los consumidores integran el servicio con mayor confianza y menor fricción.